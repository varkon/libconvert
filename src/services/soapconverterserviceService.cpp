/* soapconverterserviceService.cpp
   Generated by gSOAP 2.8.39 for converterservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapconverterserviceService.h"

converterserviceService::converterserviceService() : soap(SOAP_IO_DEFAULT)
{	converterserviceService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

converterserviceService::converterserviceService(const converterserviceService& rhs)
{	soap_copy_context(this, &rhs);
}

converterserviceService::converterserviceService(const struct soap &_soap) : soap(_soap)
{ }

converterserviceService::converterserviceService(soap_mode iomode) : soap(iomode)
{	converterserviceService_init(iomode, iomode);
}

converterserviceService::converterserviceService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	converterserviceService_init(imode, omode);
}

converterserviceService::~converterserviceService()
{
	this->destroy();
}

void converterserviceService::converterserviceService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"t", "http://tempuri.org/t.xsd", NULL, NULL},
        {"ns", "urn:converterservice", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void converterserviceService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void converterserviceService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	converterserviceService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
converterserviceService *converterserviceService::copy()
{	converterserviceService *dup = SOAP_NEW_COPY(converterserviceService(*(struct soap*)this));
	return dup;
}
#endif

converterserviceService& converterserviceService::operator=(const converterserviceService& rhs)
{	soap_copy_context(this, &rhs);
	return *this;
}

int converterserviceService::soap_close_socket()
{	return soap_closesock(this);
}

int converterserviceService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int converterserviceService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int converterserviceService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int converterserviceService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int converterserviceService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void converterserviceService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void converterserviceService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *converterserviceService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void converterserviceService::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *converterserviceService::soap_header()
{	return this->header;
}

int converterserviceService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int converterserviceService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET converterserviceService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET converterserviceService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int converterserviceService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int converterserviceService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__MakeConvert(converterserviceService*);

int converterserviceService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:MakeConvert"))
		return serve_ns__MakeConvert(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__MakeConvert(converterserviceService *soap)
{	struct ns__MakeConvert soap_tmp_ns__MakeConvert;
	t__result result;
	result.soap_default(soap);
	soap_default_ns__MakeConvert(soap, &soap_tmp_ns__MakeConvert);
	if (!soap_get_ns__MakeConvert(soap, &soap_tmp_ns__MakeConvert, "ns:MakeConvert", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->MakeConvert(soap_tmp_ns__MakeConvert.request, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "t:result", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "t:result", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of server object code */
